{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { GetWeahterData } from \"../api/WeatherApi\";\nexport default function CityWeatherData(cityCoordinates) {\n  _s();\n  const [weatherData, setWeatherData] = useState();\n  const [weatherArrayTimeIndex, setWeatherArrayTimeIndex] = useState(0);\n  const [weatherArrayDateIndex, setWeatherArrayDateIndex] = useState(0);\n  useEffect(() => {\n    const fetchData = async () => {\n      var _response$hourly$time;\n      const coordinates = await cityCoordinates;\n      const latitude = (Math.round(coordinates.latitude * 100) / 100).toFixed(2);\n      const longitude = (Math.round(coordinates.longitude * 100) / 100).toFixed(2);\n      let response = await GetWeahterData(latitude, longitude);\n      console.log(response);\n      setWeatherData(response);\n      let dateNow = new Date();\n      let timeNow = dateNow.getHours();\n      let today;\n      today = dateNow.getFullYear() + \"-0\" + (dateNow.getMonth() + 1) + \"-\" + dateNow.getDate() + \"T12:00\";\n      let indexOfToday = (_response$hourly$time = response === null || response === void 0 ? void 0 : response.hourly.time.indexOf(today)) !== null && _response$hourly$time !== void 0 ? _response$hourly$time : 0;\n      setWeatherArrayTimeIndex(timeNow - 1);\n      setWeatherArrayDateIndex(indexOfToday);\n    };\n    fetchData();\n  }, [cityCoordinates]);\n}\n_s(CityWeatherData, \"gA+dWIIdXTZZptA23bZYiS+6pIc=\");\n_c = CityWeatherData;\nvar _c;\n$RefreshReg$(_c, \"CityWeatherData\");","map":{"version":3,"names":["useEffect","useState","GetWeahterData","CityWeatherData","cityCoordinates","_s","weatherData","setWeatherData","weatherArrayTimeIndex","setWeatherArrayTimeIndex","weatherArrayDateIndex","setWeatherArrayDateIndex","fetchData","_response$hourly$time","coordinates","latitude","Math","round","toFixed","longitude","response","console","log","dateNow","Date","timeNow","getHours","today","getFullYear","getMonth","getDate","indexOfToday","hourly","time","indexOf","_c","$RefreshReg$"],"sources":["/Users/martazareckaja/Weather-App/src/components/CityWeatherData.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { GetWeahterData, WeatherData } from \"../api/WeatherApi\";\nimport { CoordinatesData } from \"../api/CoordinatesApi\";\n\nexport default function CityWeatherData(cityCoordinates: CoordinatesData) {\n  const [weatherData, setWeatherData] = useState<WeatherData | null>();\n  const [weatherArrayTimeIndex, setWeatherArrayTimeIndex] = useState<number>(0);\n  const [weatherArrayDateIndex, setWeatherArrayDateIndex] = useState<number>(0);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const coordinates = await cityCoordinates;\n      const latitude = (Math.round(coordinates.latitude * 100) / 100).toFixed(\n        2\n      );\n      const longitude = (Math.round(coordinates.longitude * 100) / 100).toFixed(\n        2\n      );\n\n      let response = await GetWeahterData(latitude, longitude);\n      console.log(response);\n\n      setWeatherData(response);\n\n      let dateNow = new Date();\n      let timeNow = dateNow.getHours();\n\n      let today: string;\n      today =\n        dateNow.getFullYear() +\n        \"-0\" +\n        (dateNow.getMonth() + 1) +\n        \"-\" +\n        dateNow.getDate() +\n        \"T12:00\";\n\n      let indexOfToday = response?.hourly.time.indexOf(today) ?? 0;\n\n      setWeatherArrayTimeIndex(timeNow - 1);\n      setWeatherArrayDateIndex(indexOfToday);\n    };\n\n    fetchData();\n  }, [cityCoordinates]);\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,cAAc,QAAqB,mBAAmB;AAG/D,eAAe,SAASC,eAAeA,CAACC,eAAgC,EAAE;EAAAC,EAAA;EACxE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAqB,CAAC;EACpE,MAAM,CAACO,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGR,QAAQ,CAAS,CAAC,CAAC;EAC7E,MAAM,CAACS,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGV,QAAQ,CAAS,CAAC,CAAC;EAE7ED,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAAA,IAAAC,qBAAA;MAC5B,MAAMC,WAAW,GAAG,MAAMV,eAAe;MACzC,MAAMW,QAAQ,GAAG,CAACC,IAAI,CAACC,KAAK,CAACH,WAAW,CAACC,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG,EAAEG,OAAO,CACrE,CACF,CAAC;MACD,MAAMC,SAAS,GAAG,CAACH,IAAI,CAACC,KAAK,CAACH,WAAW,CAACK,SAAS,GAAG,GAAG,CAAC,GAAG,GAAG,EAAED,OAAO,CACvE,CACF,CAAC;MAED,IAAIE,QAAQ,GAAG,MAAMlB,cAAc,CAACa,QAAQ,EAAEI,SAAS,CAAC;MACxDE,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MAErBb,cAAc,CAACa,QAAQ,CAAC;MAExB,IAAIG,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;MACxB,IAAIC,OAAO,GAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC;MAEhC,IAAIC,KAAa;MACjBA,KAAK,GACHJ,OAAO,CAACK,WAAW,CAAC,CAAC,GACrB,IAAI,IACHL,OAAO,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GACxB,GAAG,GACHN,OAAO,CAACO,OAAO,CAAC,CAAC,GACjB,QAAQ;MAEV,IAAIC,YAAY,IAAAlB,qBAAA,GAAGO,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEY,MAAM,CAACC,IAAI,CAACC,OAAO,CAACP,KAAK,CAAC,cAAAd,qBAAA,cAAAA,qBAAA,GAAI,CAAC;MAE5DJ,wBAAwB,CAACgB,OAAO,GAAG,CAAC,CAAC;MACrCd,wBAAwB,CAACoB,YAAY,CAAC;IACxC,CAAC;IAEDnB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,eAAe,CAAC,CAAC;AACvB;AAACC,EAAA,CAxCuBF,eAAe;AAAAgC,EAAA,GAAfhC,eAAe;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}